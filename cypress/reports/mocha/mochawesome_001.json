{
  "stats": {
    "suites": 3,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2019-08-19T15:51:12.959Z",
    "end": "2019-08-19T15:51:37.820Z",
    "duration": 24861,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "84c464a0-5e66-4ea8-a3de-053dde014eb9",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "a96c4169-f39b-47ad-ac28-5aaa1d7a96cc",
        "title": "UI to Vuex store",
        "fullFile": "",
        "file": "",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "has loading, newTodo and todos properties",
            "fullTitle": "UI to Vuex store has loading, newTodo and todos properties",
            "duration": 239,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getStore().its('state').should('have.keys', ['loading', 'newTodo', 'todos']);",
            "err": {},
            "isRoot": false,
            "uuid": "ba56c55b-8705-4520-a4dc-7e834731fbdf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "starts empty",
            "fullTitle": "UI to Vuex store starts empty",
            "duration": 218,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var omitLoading = function omitLoading(state) {\n  return Cypress._.omit(state, 'loading');\n};\ngetStore().its('state').then(omitLoading).should('deep.equal', {\n  todos: [],\n  newTodo: ''\n});",
            "err": {},
            "isRoot": false,
            "uuid": "11db12b9-d787-4b90-8eff-57802f07e4bf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can enter new todo text",
            "fullTitle": "UI to Vuex store can enter new todo text",
            "duration": 614,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var text = 'learn how to test with Cypress.io';\ncy.get('.todoapp').find('.new-todo').type(text).trigger('change');\ngetStore().its('state.newTodo').should('equal', text);",
            "err": {},
            "isRoot": false,
            "uuid": "36451192-2f75-4a1a-be15-bf0dab64a156",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "stores todos in the store",
            "fullTitle": "UI to Vuex store stores todos in the store",
            "duration": 665,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _utils.enterTodo)('first todo');\n(0, _utils.enterTodo)('second todo');\ngetStore().its('state.todos').should('have.length', 2);\nvar removeIds = function removeIds(list) {\n  return list.map(function (todo) {\n    return Cypress._.omit(todo, 'id');\n  });\n};\ngetStore().its('state.todos').then(removeIds).should('deep.equal', [{\n  title: 'first todo',\n  completed: false\n}, {\n  title: 'second todo',\n  completed: false\n}]);",
            "err": {},
            "isRoot": false,
            "uuid": "eb4703cd-937d-4606-b43f-e530faadcb2b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "stores todos in the store (with ids)",
            "fullTitle": "UI to Vuex store stores todos in the store (with ids)",
            "duration": 610,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "stubMathRandom();\n(0, _utils.enterTodo)('first todo');\n(0, _utils.enterTodo)('second todo');\ngetStore().its('state.todos').should('have.length', 2);\ngetStore().its('state.todos').should('deep.equal', [{\n  title: 'first todo',\n  completed: false,\n  id: '1'\n}, {\n  title: 'second todo',\n  completed: false,\n  id: '2'\n}]);",
            "err": {},
            "isRoot": false,
            "uuid": "3619305d-5e7e-4b4f-83bd-0046261f905e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ba56c55b-8705-4520-a4dc-7e834731fbdf",
          "11db12b9-d787-4b90-8eff-57802f07e4bf",
          "36451192-2f75-4a1a-be15-bf0dab64a156",
          "eb4703cd-937d-4606-b43f-e530faadcb2b",
          "3619305d-5e7e-4b4f-83bd-0046261f905e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2346,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3d0ad0e7-d848-4393-9e27-0386e82daf71",
        "title": "Vuex store",
        "fullFile": "",
        "file": "",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "starts empty",
            "fullTitle": "Vuex store starts empty",
            "duration": 169,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getStoreTodos().should('deep.equal', []);",
            "err": {},
            "isRoot": false,
            "uuid": "c92272d2-05d5-416f-8091-933c0dce21da",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can enter new todo text",
            "fullTitle": "Vuex store can enter new todo text",
            "duration": 663,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var text = 'learn how to test with Cypress.io';\ncy.get('.todoapp').find('.new-todo').type(text).trigger('change');\ngetFromStore('newTodo').should('equal', text);",
            "err": {},
            "isRoot": false,
            "uuid": "7b90939c-15fc-4e46-91cb-d880ce024f52",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can compare the entire store",
            "fullTitle": "Vuex store can compare the entire store",
            "duration": 181,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getStore().should('deep.equal', {\n  loading: false,\n  todos: [],\n  newTodo: ''\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4dfa3951-c3c6-47e4-b132-3e33222963df",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "starts typing after delayed server response",
            "fullTitle": "Vuex store starts typing after delayed server response",
            "duration": 7534,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// this will force new todo item to be added only after a delay\ncy.server();\ncy.route({\n  method: 'POST',\n  url: '/todos',\n  delay: 3000,\n  response: {}\n});\nvar title = 'first todo';\n(0, _utils.enterTodo)(title);\nvar newTitleText = 'this is a second todo title, slowly typed';\n(0, _utils.getNewTodoInput)().type(newTitleText, {\n  delay: 100\n}).trigger('change');\n(0, _utils.getNewTodoInput)().should('have.value', newTitleText);",
            "err": {},
            "isRoot": false,
            "uuid": "1c17534c-3f5b-4d03-ab85-ac5924ecf793",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can add a todo, type and compare entire store",
            "fullTitle": "Vuex store can add a todo, type and compare entire store",
            "duration": 827,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var title = 'a random todo';\n(0, _utils.enterTodo)(title);\nvar text = 'learn how to test with Cypress.io';\ncy.get('.todoapp').find('.new-todo').type(text).trigger('change');\ngetStore().should('deep.equal', {\n  loading: false,\n  todos: [{\n    title: title,\n    completed: false,\n    id: '1'\n  }],\n  newTodo: text\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cabbbad8-d25e-4837-8a16-c18935879929",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can add a todo",
            "fullTitle": "Vuex store can add a todo",
            "duration": 458,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var title = \"a single todo \".concat((0, _utils.newId)());\n(0, _utils.enterTodo)(title);\ngetStoreTodos().should('have.length', 1).its('0').and('have.all.keys', 'id', 'title', 'completed');",
            "err": {},
            "isRoot": false,
            "uuid": "c32ca555-d6c7-4ee6-8a80-0e3dd9aca6d0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can add a particular todo",
            "fullTitle": "Vuex store can add a particular todo",
            "duration": 362,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var title = \"a single todo \".concat((0, _utils.newId)());\n(0, _utils.enterTodo)(title);\ngetStoreTodos().should('deep.equal', [{\n  title: title,\n  completed: false,\n  id: '2'\n}]);",
            "err": {},
            "isRoot": false,
            "uuid": "c6f5c7a0-7374-432f-984c-bb232cb242c6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can add two todos and delete one",
            "fullTitle": "Vuex store can add two todos and delete one",
            "duration": 609,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var first = (0, _utils.makeTodo)();\nvar second = (0, _utils.makeTodo)();\n(0, _utils.enterTodo)(first.title);\n(0, _utils.enterTodo)(second.title);\n(0, _utils.getTodoItems)().should('have.length', 2).first().find('.destroy').click({\n  force: true\n});\n(0, _utils.getTodoItems)().should('have.length', 1);\ngetStoreTodos().should('deep.equal', [{\n  title: second.title,\n  completed: false,\n  id: '4'\n}]);",
            "err": {},
            "isRoot": false,
            "uuid": "6690ddae-0d19-4e93-ba87-02bef26a432f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can wait on promise-returning store actions",
            "fullTitle": "Vuex store can wait on promise-returning store actions",
            "duration": 2146,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// automatically waits for promise returned by the action to resolve\ngetVuex().invoke('dispatch', 'addTodoAfterDelay', {\n  milliseconds: 2000,\n  title: 'async task'\n}); // log message appears after 2 seconds\ncy.log('after invoke'); // assert UI\n(0, _utils.getTodoItems)().should('have.length', 1).first().contains('async task');",
            "err": {},
            "isRoot": false,
            "uuid": "12da9d82-ace9-4c99-bf2f-d4d7fec1eeb5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "can be driven by dispatching actions",
            "fullTitle": "Vuex store can be driven by dispatching actions",
            "duration": 206,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "store.dispatch('setNewTodo', 'a new todo');\nstore.dispatch('addTodo');\nstore.dispatch('clearNewTodo'); // assert UI\n(0, _utils.getTodoItems)().should('have.length', 1).first().contains('a new todo'); // assert store\ngetStore().should('deep.equal', {\n  loading: false,\n  todos: [{\n    title: 'a new todo',\n    completed: false,\n    id: '1'\n  }],\n  newTodo: ''\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f49d4dbe-68ff-43e8-84e8-44ec74ee11b4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c92272d2-05d5-416f-8091-933c0dce21da",
          "7b90939c-15fc-4e46-91cb-d880ce024f52",
          "4dfa3951-c3c6-47e4-b132-3e33222963df",
          "1c17534c-3f5b-4d03-ab85-ac5924ecf793",
          "cabbbad8-d25e-4837-8a16-c18935879929",
          "c32ca555-d6c7-4ee6-8a80-0e3dd9aca6d0",
          "c6f5c7a0-7374-432f-984c-bb232cb242c6",
          "6690ddae-0d19-4e93-ba87-02bef26a432f",
          "12da9d82-ace9-4c99-bf2f-d4d7fec1eeb5",
          "f49d4dbe-68ff-43e8-84e8-44ec74ee11b4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 13155,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "624e4b1f-4bb9-46e0-b8ac-b8af4cd0e376",
        "title": "Store actions",
        "fullFile": "",
        "file": "",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "changes the state",
            "fullTitle": "Store actions changes the state",
            "duration": 142,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getStore().then(function (store) {\n  store.dispatch('setNewTodo', 'a new todo');\n  store.dispatch('addTodo');\n  store.dispatch('clearNewTodo');\n});\ngetStore().its('state').should('deep.equal', {\n  loading: false,\n  todos: [{\n    title: 'a new todo',\n    completed: false,\n    id: '1'\n  }],\n  newTodo: ''\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5454b15d-f711-4409-97e4-7eaf2d5b650e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "changes the state after delay",
            "fullTitle": "Store actions changes the state after delay",
            "duration": 3293,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// this will force store action \"setNewTodo\" to commit\n// change to the store only after 3 seconds\ncy.server();\ncy.route({\n  method: 'POST',\n  url: '/todos',\n  delay: 3000,\n  response: {}\n});\ngetStore().then(function (store) {\n  store.dispatch('setNewTodo', 'a new todo');\n  store.dispatch('addTodo');\n  store.dispatch('clearNewTodo');\n});\ngetStore().its('state').should('deep.equal', {\n  loading: false,\n  todos: [{\n    title: 'a new todo',\n    completed: false,\n    id: '1'\n  }],\n  newTodo: ''\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1526ed45-d3a1-40e1-bc5a-658de15285eb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "changes the ui",
            "fullTitle": "Store actions changes the ui",
            "duration": 139,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "getStore().then(function (store) {\n  store.dispatch('setNewTodo', 'a new todo');\n  store.dispatch('addTodo');\n  store.dispatch('clearNewTodo');\n}); // assert UI\n(0, _utils.getTodoItems)().should('have.length', 1).first().contains('a new todo');",
            "err": {},
            "isRoot": false,
            "uuid": "dda23244-5008-434f-96b3-a35821912557",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "calls server",
            "fullTitle": "Store actions calls server",
            "duration": 730,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "cy.server();\ncy.route({\n  method: 'POST',\n  url: '/todos'\n}).as('postTodo');\ngetStore().then(function (store) {\n  store.dispatch('setNewTodo', 'a new todo');\n  store.dispatch('addTodo');\n  store.dispatch('clearNewTodo');\n}); // assert server call\ncy.wait('@postTodo').its('request.body').should('deep.equal', {\n  title: 'a new todo',\n  completed: false,\n  id: '1'\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9fa54b57-0088-4b2b-9a04-f17b872557b1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "calls server with delay",
            "fullTitle": "Store actions calls server with delay",
            "duration": 4867,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "cy.server();\ncy.route({\n  method: 'POST',\n  url: '/todos',\n  delay: 3000,\n  response: {}\n}).as('postTodo');\ngetStore().then(function (store) {\n  store.dispatch('setNewTodo', 'a new todo');\n  store.dispatch('addTodo');\n  store.dispatch('clearNewTodo');\n}); // assert server call - will wait 3 seconds until stubbed server responds\ncy.wait('@postTodo').its('request.body').should('deep.equal', {\n  title: 'a new todo',\n  completed: false,\n  id: '1'\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9bb00c4a-6ec0-4643-a608-8fbb16964774",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5454b15d-f711-4409-97e4-7eaf2d5b650e",
          "1526ed45-d3a1-40e1-bc5a-658de15285eb",
          "dda23244-5008-434f-96b3-a35821912557",
          "9fa54b57-0088-4b2b-9a04-f17b872557b1",
          "9bb00c4a-6ec0-4643-a608-8fbb16964774"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 9171,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}